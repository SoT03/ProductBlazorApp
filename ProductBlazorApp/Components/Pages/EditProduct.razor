@page "/edit/{id:int?}"
@inject NavigationManager NavigationManager
@inject ProductService ProductService
@using ProductBlazorApp.Data
@using Microsoft.AspNetCore.Components.Forms
@using ProductBlazorApp.Models
@rendermode InteractiveServer

<h3>@(isNew ? "Add New Product" : "Edit Product")</h3>

@if (loading)
{
    <p>Loading...</p>
}else
{
    <EditForm Model="newProduct" OnValidSubmit="SaveProduct" FormName="AddProductForm">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="newProduct.Name" />
            <ValidationMessage For="@(() => newProduct.Name)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label class="form-label">Price</label>
            <InputNumber class="form-control" @bind-Value="newProduct.Price" />
            <ValidationMessage For="@(() => newProduct.Price)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="newProduct.Description" />
            <ValidationMessage For="@(() => newProduct.Description)" class="text-danger" />
        </div>

        <button class="btn btn-success">@(isNew ? "Add" : "Update")</button>

        <a href="/" type="button" class="btn btn-secondary">Cancel</a>
    </EditForm>
}



@code {
    private Product newProduct = new Product();
    [Parameter] public int? Id { get; set; }
    private bool loading = true;
    private bool isNew;

    private async Task SaveProduct()
    {
        if(newProduct.Id == 0)
        {
            await ProductService.AddProductAsync(newProduct);
        }else
        {
            await ProductService.UpdateProductAsync(newProduct);
        }


        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()

    {
        if(Id.HasValue && Id.Value > 0)
        {
            newProduct = await ProductService.GetProductByIdAsync(Id.Value) ?? new Product();
        }
        loading = false;
        isNew = newProduct.Id == 0;
    }


    
}